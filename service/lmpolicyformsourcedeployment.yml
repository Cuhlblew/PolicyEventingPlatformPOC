#  apiVersion - Which version of the Kubernetes API you're using to create this object
apiVersion: apps/v1
#  kind - What kind of object you want to create
kind: Deployment
# metadata - Data that helps uniquely identify the object, including a name string, UID, and optional namespace
metadata:
  name: lmpolicyformsource-deployment
  labels:
    app: lmpolicyformsource
# spec - What state you desire for the object
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: lmpolicyformsource
  template:
    metadata:
      labels:
        app: lmpolicyformsource
    spec:
      containers:
      - name: lmpolicyformsource
        image: cuhlbblew/lmpolicyformsource:1.16
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: main
          protocol: TCP
        command: [ "/app/startlmpolicyservice.sh"]
        #args: [ "lmpolicyformsource", "127.0.0.1", "8080", "http://127.0.0.1:8081"]
        args: ["$(SERVICE)", "$(URL)"]
        env:
        - name:  SERVICE
          value: "lmpolicyformsource"
        - name:  HOST
          value: "127.0.0.1"
        - name:  PORT
          value: "8080"
        - name:  URL
          value: "http://lmpolicycapture-service.default:8081/policyupdate"
---
apiVersion: v1
kind: Service
metadata:
  name: lmpolicyformsource-service
spec:
  type: ClusterIP ### may be ommited as it is a default type
  selector:
    app: lmpolicyformsource ### should match your labels defined for your pods
  ports:
  - name: main
    protocol: TCP
    targetPort: 8080 ### port your angular app listens on
    port: 8000 ### port on which you want to expose it within your cluster
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: lmpolicyformsource-ingress
spec:
  rules:
  - host: lmpolicyformsource
    http:
      paths:
      - backend:
          serviceName: lmpolicyformsource-service
          servicePort: 8000
        path: /policyupdate
